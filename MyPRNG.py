#Author: Andrew Le
#Email: andrewle19@csu.fullerton.edu
# Psudo_random number generator that generates random number of user given seed or seed generated by time

import time



class MyPRNG:

    #constructor of class defaults: seed to time.clock, min = 1 , max = 1000
    def __init__(self, myseed = time.clock(), min = 1 , max = 1000):
        self.seed = (myseed * 16807) % 2147483947
        self.min = min
        self.max = max

    # reseed passes in new seed and reseeds it to the class seed
    #input: new seed value
    def reseed(self,reseed):
        self.seed = (self.seed * reseed * 16807) % 2147483947

    #creates a psudo random number and returns it as an integer
    # input: None
    # output: psudorandom number
    def next_prn(self):
        random_num = self.seed % self.max + self.min
        random_num = int(random_num)
        return random_num

    # generates 100 random numbers and uses the numbers as a new seed, returns 101st random number
    # input: None
    # output: returns 101st random number
    def generate(self):
        for x in xrange(0,101):
            self.reseed(self.next_prn())

        return self.next_prn()

    #sets the seed used in options
    #input: the new seed
    #output: none
    def setSeed(self,newseed):
        self.seed = newseed

    # sets the min used in options
    # input: the new min
    # output: none
    def setMin(self,newmin):
        self.min = newmin

    # sets the min used in options
    # input: the new min
    # output: none
    def setMax(self,newmax):
        self.max = newmax
